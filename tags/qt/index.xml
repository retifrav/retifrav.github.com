<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qt on Declaration of VAR</title>
    <link>https://retifrav.github.io/tags/qt/</link>
    <description>Recent content in qt on Declaration of VAR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Fri, 04 Dec 2020 21:28:53 +0100</lastBuildDate><atom:link href="https://retifrav.github.io/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Qt without installer</title>
      <link>https://retifrav.github.io/blog/2020/12/04/qt-without-installer/</link>
      <pubDate>Fri, 04 Dec 2020 21:28:53 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2020/12/04/qt-without-installer/</guid>
      <description>&lt;p&gt;At some point (&lt;em&gt;beginning of 2020 year&lt;/em&gt;) &lt;a href=&#34;https://www.qt.io/download-qt-installer&#34;&gt;Qt installer&lt;/a&gt; started to require users to have &lt;a href=&#34;http://account.qt.io/&#34;&gt;Qt Account&lt;/a&gt; (&lt;em&gt;again&lt;/em&gt;), otherwise you can&amp;rsquo;t proceed with the installation. More details in the Qt&amp;rsquo;s official &lt;a href=&#34;https://www.qt.io/blog/qt-offering-changes-2020&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2020/12/04/qt-without-installer/images/qt-installer-account.png&#34; alt=&#34;Qt installer, account&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s something that &lt;a href=&#34;https://www.qt.io/blog/2015/05/04/new-unified-qt-online-installer-available&#34;&gt;already happened before&lt;/a&gt;, but back then community got really mad about it, so The Qt Company &lt;a href=&#34;https://www.qt.io/blog/2015/05/06/changing-qt-account-to-be-optional-in-the-online-installer&#34;&gt;reverted that&lt;/a&gt;, and installer started to work without Qt Account. And now they fucking did it again, and apparently this time community wasn&amp;rsquo;t that mad (&lt;em&gt;or there is nothing left of that community after all the stunts The Qt Company has been pulling over the past years&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Anyway, I won&amp;rsquo;t tolerate such anal-probing, so The Qt Company (&lt;em&gt;or rather its management&lt;/em&gt;) can go fuck itself, and I&amp;rsquo;ll be just building Qt from sources - it&amp;rsquo;s not that scary as it sounds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New Qt blog retarded design</title>
      <link>https://retifrav.github.io/blog/2019/11/24/qt-blog-new-ugly-design/</link>
      <pubDate>Sun, 24 Nov 2019 12:55:03 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2019/11/24/qt-blog-new-ugly-design/</guid>
      <description>&lt;p&gt;Geniuses from Qt marketing team have (again) changed the website design. The blog now looks especially retarded:&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2019/11/24/qt-blog-new-ugly-design/images/qt-blog-retarded.png&#34; alt=&#34;New retarded Qt blog design&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;I couldn&amp;rsquo;t tolerate this, so I wrote a custom CSS for &lt;a href=&#34;https://add0n.com/stylus.html&#34;&gt;Stylus&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amazon, MXNet and Qt - The Great Robot Arm challenge</title>
      <link>https://retifrav.github.io/blog/2019/11/10/amazon-mxnet-qt-demo/</link>
      <pubDate>Sun, 10 Nov 2019 18:27:31 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2019/11/10/amazon-mxnet-qt-demo/</guid>
      <description>&lt;p&gt;This February on the &lt;a href=&#34;https://www.embedded-world.de/en&#34;&gt;Embedded World 2019&lt;/a&gt; event in Nuremberg The Qt Company had a joint demo together with Amazon - &amp;ldquo;The Great Robot Arm Challenge&amp;rdquo;.&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; src=&#34;https://www.youtube.com/embed/UwJxLztoI1o&#34; frameborder=&#34;0&#34; allow=&#34;encrypted-media; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Amazon guys wrote a &lt;a href=&#34;https://medium.com/apache-mxnet/the-learning-robot-1c2deab8f375&#34;&gt;good article&lt;/a&gt; covering the deep-learning part. In turn, I wanted to tell about the Qt part.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Yet another new set of Qt icons</title>
      <link>https://retifrav.github.io/blog/2019/06/22/qt-yet-another-new-icon/</link>
      <pubDate>Sat, 22 Jun 2019 14:10:13 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2019/06/22/qt-yet-another-new-icon/</guid>
      <description>&lt;p&gt;Not that long ago Qt logo and other stuff &lt;a href=&#34;https://blog.qt.io/blog/2016/04/13/making-the-qt-brand-remarkable/&#34;&gt;got rebranded&lt;/a&gt;, and most of the Qt tools got new icons. But then some freshly hired demiurge from the design team apparently decided that those are just boring and came up with a new design, which in my arrogant opinion is basically a piece of shit:&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2019/06/22/qt-yet-another-new-icon/images/qt-creator-new-icon.png&#34; alt=&#34;Qt Creator new icon&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;Just what kind of designer would get an idea that this diagonally-mutilated two-color thingy (with &lt;em&gt;all&lt;/em&gt; capital letters!) is better than the current nice and clean version? I reckon, a very creative and talented kind.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code and CMake for Qt</title>
      <link>https://retifrav.github.io/blog/2019/05/11/vscode-cmake-qt/</link>
      <pubDate>Sat, 11 May 2019 15:00:23 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2019/05/11/vscode-cmake-qt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.qt.io/blog/2017/05/29/qbs-1-8-released/&#34;&gt;After&lt;/a&gt; &lt;a href=&#34;https://blog.qt.io/blog/2017/09/05/qbs-1-9-released/&#34;&gt;numerous&lt;/a&gt; &lt;a href=&#34;https://blog.qt.io/blog/2017/12/07/qbs-1-10-released/&#34;&gt;promises&lt;/a&gt; of how &lt;a href=&#34;https://doc.qt.io/qbs/index.html&#34;&gt;Qbs&lt;/a&gt; will be the Qt&amp;rsquo;s default build system, The Qt Company suddenly &lt;a href=&#34;https://blog.qt.io/blog/2018/10/29/deprecation-of-qbs/&#34;&gt;killed it&lt;/a&gt;, announced that &lt;a href=&#34;https://doc.qt.io/qt-5/qmake-manual.html&#34;&gt;qmake&lt;/a&gt; is a dead man walking too, and actually Qt is switching to &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I guess we should start using CMake for building Qt applications as well. Let&amp;rsquo;s see then what it takes to switch from qmake to CMake with a couple of basic examples.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2019/05/11/vscode-cmake-qt/images/qt-cmake-vscode.png&#34; alt=&#34;Qt, CMake and Visual Studio Code&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;I also wanted to try Qt development with Visual Studio Code, and now is a good occasion for that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Convert PNG to ICNS on Mac OS</title>
      <link>https://retifrav.github.io/blog/2018/10/09/macos-convert-png-to-icns/</link>
      <pubDate>Tue, 09 Oct 2018 14:17:03 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2018/10/09/macos-convert-png-to-icns/</guid>
      <description>&lt;p&gt;Developing an application for Mac OS, sooner or later you&amp;rsquo;ll want to add an icon to it. And Mac OS uses Apple&amp;rsquo;s own format for application icons - &lt;a href=&#34;https://en.wikipedia.org/wiki/Apple_Icon_Image_format&#34;&gt;Apple Icon Image format&lt;/a&gt; - files with &lt;code&gt;.icns&lt;/code&gt; extension. But how does one create such a file?&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2018/10/09/macos-convert-png-to-icns/images/macos-application-icon.png&#34; alt=&#34;Application icon inside the app bundle on Mac OS&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;It is actually not so hard, but there are some tricky moments. I&amp;rsquo;ll cover those and as a bonus I&amp;rsquo;ll show you how to use &lt;code&gt;.icns&lt;/code&gt; icon in Qt-based application (&lt;em&gt;deadly simple&lt;/em&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt for iOS - setting up development environment</title>
      <link>https://retifrav.github.io/blog/2018/09/22/qt-for-ios/</link>
      <pubDate>Sat, 22 Sep 2018 21:52:45 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2018/09/22/qt-for-ios/</guid>
      <description>&lt;p&gt;I already wrote about &lt;a href=&#34;https://retifrav.github.io/blog/2017/12/28/qt-for-android/&#34;&gt;Qt for Android&lt;/a&gt;, and today it is turn for iOS.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2018/09/22/qt-for-ios/images/qt-for-ios.png&#34; alt=&#34;Qt for iOS&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;And this article will be much shorter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XBMC/Kodi remote control application</title>
      <link>https://retifrav.github.io/blog/2018/09/01/kodi-remote-control-app/</link>
      <pubDate>Sat, 01 Sep 2018 20:46:42 -0700</pubDate>
      
      <guid>https://retifrav.github.io/blog/2018/09/01/kodi-remote-control-app/</guid>
      <description>&lt;p&gt;There is this great piece of software - &lt;a href=&#34;https://kodi.tv&#34;&gt;XBMC/Kodi&lt;/a&gt; media player. I&amp;rsquo;ll write a separate article about that one, but today I want to show you a remote control application for it, which I&amp;rsquo;ve created for myself.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2018/09/01/kodi-remote-control-app/images/kodi-remote-control-app.png&#34; alt=&#34;Kodi remote control application&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;Beauty, innit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interacting with HTML from QML over WebChannel/WebSockets</title>
      <link>https://retifrav.github.io/blog/2018/07/14/html-from-qml-over-webchannel-websockets/</link>
      <pubDate>Sat, 14 Jul 2018 16:00:55 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2018/07/14/html-from-qml-over-webchannel-websockets/</guid>
      <description>&lt;p&gt;Qt allows to create applications with so-called &lt;a href=&#34;http://doc.qt.io/qt-5/topics-web-content.html&#34;&gt;hybrid GUI&lt;/a&gt; - where you can mix native parts with HTML-based content. Such a mix even supports interaction between those native parts and HTML-side - by exposing &lt;a href=&#34;http://doc.qt.io/qt-5/qobject.html&#34;&gt;QObjects&lt;/a&gt; via &lt;a href=&#34;https://doc.qt.io/qt-5.11/qtwebchannel-index.html&#34;&gt;WebChannel&lt;/a&gt; and &lt;a href=&#34;https://doc.qt.io/qt-5.11/websockets-overview.html&#34;&gt;WebSockets&lt;/a&gt;.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2018/07/14/html-from-qml-over-webchannel-websockets/images/html-qml-webchannel-websockets.png&#34; alt=&#34;Interaction between QML and HTML&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;And there are several ways of implementing that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XMLHttpRequest from QML</title>
      <link>https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/</link>
      <pubDate>Sat, 09 Jun 2018 14:44:02 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt; is a web standard (WHATWG/W3C, but better to read about it at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;MDN&lt;/a&gt;) for communication between JS-frontend and REST-backend.&lt;/p&gt;

&lt;div &gt;

    &lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/images/xmlhttprequest-from-qml.png&#34; alt=&#34;XMLHttpRequest from QML&#34;/&gt;

&lt;/div&gt;

&lt;p&gt;And you can use it in &lt;a href=&#34;http://doc.qt.io/qt-5/qtqml-javascript-qmlglobalobject.html#xmlhttprequest&#34;&gt;QML&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
